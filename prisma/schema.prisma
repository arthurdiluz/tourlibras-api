generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  isActive     Boolean @default(false) @db.Boolean
  fullName     String  @db.VarChar(31)
  email        String  @unique @db.VarChar(31)
  password     String  @db.VarChar(255) // TODO: calculate length
  profilePhoto String  @db.VarChar(255) // TODO: calculate length

  role      Role?
  Professor Professor?
  Student   Student?
}

model Professor {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  grammar Grammar?
  userId  String   @unique @db.Uuid

  User    User      @relation(fields: [userId], references: [id])
  Student Student[]
  Item    Item[]
  Medal   Medal[]
}

model Student {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  experience  Int     @default(0) @db.SmallInt
  money       Float   @default(0) @db.Real
  theme       Theme   @default(LIGHT)
  userId      String  @unique @db.Uuid
  professorId String? @db.Uuid

  User            User              @relation(fields: [userId], references: [id])
  Professor       Professor?        @relation(fields: [professorId], references: [id])
  StudentOnLesson StudentOnLesson[]
}

model Item {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String @db.VarChar(15)
  description String @db.VarChar(31)
  price       Float  @default(0) @db.Real
  media       String @db.VarChar(255) // TODO: calculate length
  professorId String @db.Uuid

  Professor Professor @relation(fields: [professorId], references: [id])
}

model Medal {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name          String  @db.VarChar(15)
  description   String  @db.VarChar(31)
  media         String  @db.VarChar(255) // TODO: calculate length
  isCumultative Boolean @default(false) @db.Boolean
  professorId   String  @db.Uuid

  Professor Professor @relation(fields: [professorId], references: [id])
  Lesson    Lesson[]
}

model ItemOnStudent {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  itemId String @db.Uuid
  userId String @db.Uuid

  @@id([itemId, userId])
}

model MedalOnStudent {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  medalId String @db.Uuid
  userId  String @db.Uuid
  amount  Int    @db.SmallInt

  @@id([medalId, userId])
}

model Lesson {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  icon    String @db.VarChar(255) // TODO: calculate length
  title   String @db.VarChar(7)
  medalId String @db.Uuid

  Medal           Medal             @relation(fields: [medalId], references: [id])
  Level           Level[]
  StudentOnLesson StudentOnLesson[]
}

model Level {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  level       Int    @default(1) @db.SmallInt
  earnedXp    Int    @db.SmallInt
  earnedMoney Float  @db.Real
  lessonId    String @db.Uuid

  Lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Exercise {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  media     String @db.VarChar(255) // TODO: calculate length
  statement String @db.VarChar(15)

  Alternative Alternative[]
}

model Alternative {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  text       String  @db.VarChar(15)
  isCorrect  Boolean @default(false) @db.Boolean
  exerciseId String  @db.Uuid

  Exercise Exercise @relation(fields: [exerciseId], references: [id])
}

model DoneExercise {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId           String  @db.Uuid
  exerciseId       String  @db.Uuid
  isCorrectAttempt Boolean @db.Boolean
}

model StudentOnLesson {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  isCompleted  Boolean @default(false) @db.Boolean
  isUnlocked   Boolean @default(false) @db.Boolean
  currentLevel Int     @db.SmallInt

  studentId String @db.Uuid
  lessonId  String @db.Uuid

  Student Student @relation(fields: [studentId], references: [id])
  Lesson  Lesson  @relation(fields: [lessonId], references: [id])
}

enum Role {
  STUDENT
  PROFESSOR
}

enum Grammar {
  SVO
  SOV
  VSO
  VOS
  OSV
  OVS
}

enum Theme {
  LIGHT
  DARK
}
