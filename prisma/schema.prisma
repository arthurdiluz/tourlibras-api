generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  isActive     Boolean @default(true) @db.Boolean // TODO: update default value
  email        String  @unique @db.VarChar(255)
  password     String  @db.VarChar(255)
  fullName     String  @db.VarChar(31)
  profilePhoto String? @db.VarChar(255)
  role         ROLE

  Student   Student?
  Professor Professor?
}

model Student {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  experience  Int   @default(0) @db.SmallInt
  money       Float @default(0) @db.Real
  theme       THEME @default(LIGHT)
  userId      Int   @unique
  professorId Int?

  User      User                      @relation(fields: [userId], references: [id])
  Professor Professor?                @relation(fields: [professorId], references: [id])
  Lessons   StudentOnLesson[]
  Items     ItemOnStudent[]
  Medals    ProfessorMedalOnStudent[]
}

model Professor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  grammar GRAMMAR?
  userId  Int      @unique

  User     User              @relation(fields: [userId], references: [id])
  Students Student[]
  Lessons  ProfessorLesson[]
  Items    ProfessorItem[]
  Medals   ProfessorMedal[]
}

model ProfessorItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String  @db.VarChar(15)
  description String  @db.VarChar(63)
  price       Float   @db.Real
  media       String? @db.VarChar(255)
  professorId Int

  Professor Professor       @relation(fields: [professorId], references: [id])
  Students  ItemOnStudent[]
}

model ProfessorMedal {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String  @db.VarChar(15)
  description String  @db.VarChar(127)
  media       String? @db.VarChar(255)
  professorId Int

  Professor Professor                 @relation(fields: [professorId], references: [id])
  Students  ProfessorMedalOnStudent[]
  Lessons   ProfessorLesson[]
}

model ProfessorLesson {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title       String  @db.VarChar(31)
  icon        String? @db.VarChar(255)
  professorId Int
  medalId     Int?

  Professor Professor         @relation(fields: [professorId], references: [id])
  Students  StudentOnLesson[]
  Levels    LessonLevel[]
  Medal     ProfessorMedal?   @relation(fields: [medalId], references: [id])
}

model LessonLevel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  level       Int   @default(1) @db.SmallInt
  earnedXp    Int   @db.SmallInt
  earnedMoney Float @db.Real
  lessonId    Int

  Lesson               ProfessorLesson       @relation(fields: [lessonId], references: [id])
  LessonLevelExercises LessonLevelExercise[]
  LessonLevelDone      LessonLevelDone[]
}

model LessonLevelExercise {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  media     String @db.VarChar(255)
  statement String @db.VarChar(31)
  levelId   Int

  Level        LessonLevel                      @relation(fields: [levelId], references: [id])
  Alternatives LessonLevelExerciseAlternative[]
}

model LessonLevelExerciseAlternative {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  text       String  @db.VarChar(31)
  isCorrect  Boolean @default(false) @db.Boolean
  exerciseId Int

  Exercise LessonLevelExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model LessonLevelDone {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  isCorrectAttempt Boolean @db.Boolean
  studentId        Int
  levelId          Int

  Student StudentOnLesson @relation(fields: [studentId], references: [id])
  Level   LessonLevel     @relation(fields: [levelId], references: [id])
}

model ItemOnStudent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  itemId    Int
  studentId Int

  Item    ProfessorItem @relation(fields: [itemId], references: [id])
  Student Student       @relation(fields: [studentId], references: [id])
}

model ProfessorMedalOnStudent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  amount    Int @db.SmallInt
  medalId   Int
  studentId Int

  Medal   ProfessorMedal @relation(fields: [medalId], references: [id])
  Student Student        @relation(fields: [studentId], references: [id])

  @@unique([medalId, studentId])
}

model StudentOnLesson {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  currentLevel Int     @default(1) @db.SmallInt
  isCompleted  Boolean @default(false) @db.Boolean
  // isUnlocked   Boolean @default(false) @db.Boolean

  studentId Int
  lessonId  Int

  DoneLevels LessonLevelDone[]
  Student    Student           @relation(fields: [studentId], references: [id])
  Lesson     ProfessorLesson   @relation(fields: [lessonId], references: [id])

  @@unique([studentId, lessonId])
}

enum ROLE {
  STUDENT
  PROFESSOR
}

enum GRAMMAR {
  SVO
  SOV
  VSO
  VOS
  OSV
  OVS
}

enum THEME {
  LIGHT
  DARK
}
